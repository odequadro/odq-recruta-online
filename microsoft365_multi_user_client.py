#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéØ CLIENTE MICROSOFT 365 MULTI-USU√ÅRIO
================================================================

Cliente Microsoft 365 aprimorado para suportar m√∫ltiplos usu√°rios
da organiza√ß√£o O. DE QUADROS:

‚Ä¢ Iza: izabella.cordeiro@odequadroservicos.com.br
‚Ä¢ Nara: narahyna.barbosa@odequadroservicos.com.br

Usa Application Permissions para acessar emails de qualquer usu√°rio
da organiza√ß√£o via Microsoft Graph API.
"""

import json
import os
import requests
from datetime import datetime, timedelta
import msal

class Microsoft365MultiUserClient:
    """
    Cliente Microsoft 365 para m√∫ltiplos usu√°rios da ODQ
    """
    
    def __init__(self):
        """
        Inicializar cliente multi-usu√°rio
        """
        # Carregar credenciais Azure
        try:
            from credentials_azure import AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, AZURE_TENANT_ID
            self.client_id = AZURE_CLIENT_ID
            self.client_secret = AZURE_CLIENT_SECRET  
            self.tenant_id = AZURE_TENANT_ID
        except ImportError:
            raise Exception("‚ùå Arquivo credentials_azure.py n√£o encontrado")
        
        # Configurar MSAL
        authority = f"https://login.microsoftonline.com/{self.tenant_id}"
        self.app = msal.ConfidentialClientApplication(
            self.client_id,
            authority=authority,
            client_credential=self.client_secret
        )
        
        # Escopos para Application Permissions
        self.scopes = ["https://graph.microsoft.com/.default"]
        
        # Emails configurados
        self.usuarios = {
            'iza': 'izabella.cordeiro@odequadroservicos.com.br',
            'nara': 'narahyna.barbosa@odequadroservicos.com.br'
        }
        
        print("üîß Cliente Microsoft 365 Multi-Usu√°rio inicializado")
    
    def _get_access_token(self):
        """
        Obter token de acesso via Application Permissions
        """
        try:
            # Tentar obter token do cache
            result = self.app.acquire_token_silent(self.scopes, account=None)
            
            if not result:
                # Obter novo token via client credentials
                result = self.app.acquire_token_for_client(scopes=self.scopes)
            
            if "access_token" in result:
                return result["access_token"]
            else:
                print(f"‚ùå Erro ao obter token: {result.get('error_description', 'Erro desconhecido')}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro na autentica√ß√£o: {str(e)}")
            return None
    
    def conectar(self):
        """
        Testar conex√£o com Microsoft 365
        """
        token = self._get_access_token()
        if token:
            print("‚úÖ Microsoft 365 Multi-Usu√°rio conectado")
            return True
        else:
            print("‚ùå Falha na conex√£o Microsoft 365")
            return False
    
    def buscar_emails_usuario(self, email_usuario, filtro_dias=7, limite=50, apenas_nao_lidos=False):
        """
        Buscar emails de um usu√°rio espec√≠fico
        
        Args:
            email_usuario: Email do usu√°rio (iza ou nara)
            filtro_dias: Buscar emails dos √∫ltimos X dias
            limite: M√°ximo de emails a retornar
            apenas_nao_lidos: Se True, busca apenas emails n√£o lidos
        """
        token = self._get_access_token()
        if not token:
            return []
        
        try:
            headers = {
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json'
            }
            
            # Resolver nome do usu√°rio para email
            if email_usuario.lower() in self.usuarios:
                email_real = self.usuarios[email_usuario.lower()]
            else:
                email_real = email_usuario
            
            # Montar filtro de data
            data_limite = datetime.now() - timedelta(days=filtro_dias)
            data_filtro = data_limite.strftime('%Y-%m-%dT%H:%M:%SZ')
            
            # Montar URL
            url = f'https://graph.microsoft.com/v1.0/users/{email_real}/messages'
            
            # Par√¢metros base
            params = {
                '$select': 'id,subject,from,receivedDateTime,hasAttachments,bodyPreview,isRead',
                '$filter': f'receivedDateTime ge {data_filtro}',
                '$orderby': 'receivedDateTime desc',
                '$top': limite
            }
            
            # Adicionar filtro para emails n√£o lidos
            if apenas_nao_lidos:
                params['$filter'] += ' and isRead eq false'
            
            print(f"üìß Buscando emails de {email_real}...")
            response = requests.get(url, headers=headers, params=params)
            
            if response.status_code == 200:
                data = response.json()
                emails = data.get('value', [])
                print(f"‚úÖ {len(emails)} emails encontrados para {email_real}")
                return emails
            else:
                print(f"‚ùå Erro ao buscar emails: {response.status_code}")
                print(f"Resposta: {response.text}")
                return []
                
        except Exception as e:
            print(f"‚ùå Erro na busca de emails: {str(e)}")
            return []
    
    def contar_emails_nao_lidos(self, email_usuario):
        """
        Contar emails n√£o lidos de um usu√°rio
        """
        token = self._get_access_token()
        if not token:
            return 0
        
        try:
            headers = {
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json'
            }
            
            # Resolver nome do usu√°rio para email
            if email_usuario.lower() in self.usuarios:
                email_real = self.usuarios[email_usuario.lower()]
            else:
                email_real = email_usuario
            
            # URL para contar emails n√£o lidos
            url = f'https://graph.microsoft.com/v1.0/users/{email_real}/mailFolders/Inbox'
            
            response = requests.get(url, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                nao_lidos = data.get('unreadItemCount', 0)
                total = data.get('totalItemCount', 0)
                return nao_lidos, total
            else:
                print(f"‚ùå Erro ao contar emails: {response.status_code}")
                return 0, 0
                
        except Exception as e:
            print(f"‚ùå Erro ao contar emails: {str(e)}")
            return 0, 0
    
    def obter_estatisticas_todos_usuarios(self):
        """
        Obter estat√≠sticas de todos os usu√°rios configurados
        """
        estatisticas = {}
        
        for nome, email in self.usuarios.items():
            try:
                nao_lidos, total = self.contar_emails_nao_lidos(email)
                estatisticas[nome] = {
                    'email': email,
                    'nao_lidos': nao_lidos,
                    'total': total
                }
            except Exception as e:
                print(f"‚ùå Erro ao obter estat√≠sticas de {nome}: {str(e)}")
                estatisticas[nome] = {
                    'email': email,
                    'nao_lidos': 0,
                    'total': 0,
                    'erro': str(e)
                }
        
        return estatisticas
    
    def buscar_emails_todos_usuarios(self, filtro_dias=7, limite=50):
        """
        Buscar emails de todos os usu√°rios configurados
        """
        todos_emails = {}
        
        for nome, email in self.usuarios.items():
            try:
                emails = self.buscar_emails_usuario(
                    email_usuario=email,
                    filtro_dias=filtro_dias,
                    limite=limite
                )
                todos_emails[nome] = emails
                print(f"‚úÖ {len(emails)} emails encontrados para {nome}")
            except Exception as e:
                print(f"‚ùå Erro ao buscar emails de {nome}: {str(e)}")
                todos_emails[nome] = []
        
        return todos_emails
